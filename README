
 _   .-')                      _  .-')                                                  _ (`-.  
( '.( OO )_                   ( \( -O )                                                ( (OO  ) 
 ,--.   ,--.) ,-.-')   .-----. ,------.  .-'),-----.        .-'),-----.  .-'),-----.  _.`     \ 
 |   `.'   |  |  |OO) '  .--./ |   /`. '( OO'  .-.  '      ( OO'  .-.  '( OO'  .-.  '(__...--'' 
 |         |  |  |  \ |  |('-. |  /  | |/   |  | |  |      /   |  | |  |/   |  | |  | |  /  | | 
 |  |'.'|  |  |  |(_//_) |OO  )|  |_.' |\_) |  |\|  |      \_) |  |\|  |\_) |  |\|  | |  |_.' | 
 |  |   |  | ,|  |_.'||  |`-'| |  .  '.'  \ |  | |  |        \ |  | |  |  \ |  | |  | |  .___.' 
 |  |   |  |(_|  |  (_'  '--'\ |  |\  \    `'  '-'  '         `'  '-'  '   `'  '-'  ' |  |      
 `--'   `--'  `--'     `-----' `--' '--'     `-----'            `-----'      `-----'  `--'      


The Micro OOP compiler
/-----------------------------------------------------------------------------\
|                                                                             |
| Created by:                                                                 |
|       Isabelle Lai      isabelle.lai@tufts.edu                              |
|       Anthony Tranduc   anthony.tranduc@tufts.edu                           |
|       Jacqueline Chin   jacqueline.chin@tufts.edu                           |
|       Maxwell Anavian   maxwell.anavian@tufts.edu                           |
|                                                                             ||                                                                             |
\-----------------------------------------------------------------------------/


/-----------------------------------------------------------------------------\
|                                                                             |
| FOR MOST ENJOYMENT MAKE SURE YOUR TERMINAL IS FULLSCREEEN :D                |
|                                                                             |
\-----------------------------------------------------------------------------/

/-----------------------------------------------------------------------------\
|                                                                             |
| BEFORE RUNNING:                                                             |
|       Make sure to install opam                                             |
|       $ opam install ocamlfind                                              |
|       $ opam install ocamlbuild                                             |
|                                                                             |
|       Make sure to install LLVM, LLI, LLC                                   |
|                                                                             |
|       Make sure clang is installed                                          |
|                                                                             |
|       If on OSX:                                                            |
|       Make sure to update your LLI path using                               |
|               $ export PATH=$PATH:/usr/local/opt/llvm/bin                   |
|                                                                             |
|                                                                             |
\-----------------------------------------------------------------------------/

How to generate LLVM code 
/-----------------------------------------------------------------------------\
|                                                                             |
| How to Compile :                                                            |
|                    make clean                                               |
|                    make toplevel.native                                     |
|                                                                             |
| How to execute test script :                                                |
|                    make test                                                |
|                                                                             |
| How to execute a single test :                                              |
|                   python3 testall.py [filename]                             |
|            note: [filename] must be in tests/ folder                        |
|                                                                             |
| Available Flags :                                                           |
|             [-a] print the AST                                              |
|             [-s] print the SAST                                             |
|             [-l] print the generated LLVM IR                                |
|             [-c] print the generated LLVM IR and check LLVM is valid        |
|                                                                             |
| How to generate intermediate files :                                        |
|                    $ ./toplevel.native [flag] [filename]                    | 
|                                                                             |
| How to generate executable :                                                |
|                    $ python3 moop.py [filepath]                             |                        |                                                                             |
|           note: this will generate an executable named a.out                |
|                                                                             |
\-----------------------------------------------------------------------------/


Programs in testing suite 
/-----------------------------------------------------------------------------\
|                                                                             |
| Positive Tests:                                                             |
|  1. pos_printstring.moop    : Prints string                                 |
|  2. pos_localstring.moop    : Assign and print string from local var        |
|  3. pos_printint.moop       : Prints an int                                 |
|  4. pos_printaddition.moop  : Prints two numbers added                      |
|  5. pos_localassign.moop    : Assigns local var multiple values             |
|  6  pos_forloop.moop        : For-loop increments local var                 |
|  7. pos_if.moop             : If statement body assigns to local var        |
|                                                                             |
| Negative Tests:                                                             | 
|  1. neg_undefinedfunction.moop : Calls a function that has not been defined |
|  2. neg_addfloattoint.moop     : Add float to int                           |
|  3. neg_duplicatefield.moop    : Class contains two fields with the same    |
|                                  name                                       |
|                                                                             |
|                                                                             |
|  Our test script compares the output of the tests to an expected            |
|  output file for each test to validate whether the compiled program         |
|  is correct                                                                 |
|                                                                             |
\-----------------------------------------------------------------------------/


Syntax to add in the future
/-----------------------------------------------------------------------------\
|                                                                             |
|  1. allowing interchangeable order of variables and statements within       |
|     methods                                                                 |
|                                                                             |
\-----------------------------------------------------------------------------/


